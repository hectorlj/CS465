#! /usr/bin/env pytho3

import sys
def mod_exp(x, y, N):
    if y is 0:
        return 1
    z = mod_exp(x, y//2, N)
    if y % 2 is 0:
        return (z**2) % N
    return x * (z**2) % N

def gcd(a, b):
    s = 0
    t = 1
    r = b
    tempS = 1
    tempT = 0
    tempR = a
    while r != 0:
        q = tempR // r
        temp = r
        r = tempR - q * temp
        tempR = temp
        
        temp = s
        s = tempS - q * temp
        tempS = temp

        temp = t
        t = tempT - q * temp
        tempT = temp
    return tempR, tempS, tempT

sys.setrecursionlimit(1500)
e = 65537

# high bit is set
# 11100100101111001001011011100111101011101101101101010100000000000011101111011111010011001010000010100101001100101100100010011001110000010111111101100000111011110001011000000110101101000001110011001111111011010001101011000010111010110110011000001000010101000110100101110001110101110001000100110000010100101001111110010011000000110101101011000101000010111000100000010101001001011010100110101011101101000101001101000001000010001010001101100010001100101110001010111011101011000110001000010011111001110100111101100011
p = 0xE4BC96E7AEDB54003BDF4CA0A532C899C17F60EF1606B41CCFED1AC2EB6608546971D71130529F93035AC50B881525A9ABB4534108A36232E2BBAC6213E74F63

# high bit is set

q = 0xD369F614E38CC59A65CA1E1849B895F18617B266C75BB25AFA092677AB276B6BE59E9C50DF0852178E2E61F74CA8B650AAF6F9E92FB0C6D8D80FD9A90656BE1B

phi = (p - 1) * (q - 1)
n = p * q

greatest_common_denominator, d, k = gcd(e, phi)

print("gcd of n and e => \n",greatest_common_denominator)
print("p => \n",p)
print("q => \n",q)
print("n => \n",n)
print("e => \n",e)
print("d => \n",d)
print("k => \n",k)
print("phi => \n",phi)

m = n - 100
if mod_exp(mod_exp(m, e, n), d, n) != m:
    print("Something's broken!")
else:
    print("first works")

m -= 67819518530193159807605548298835471328
if mod_exp(mod_exp(m, e, n), d, n) != m:
    print("Something's broken!")
else:
    print("second works")

m -= 1841144260691524321871345499132235474341293075968788535
if mod_exp(mod_exp(m, e, n), d, n) != m:
    print("Something's broken!")
else:
    print("third works")

encrypt = mod_exp(59894579301739326781951853019315980760554829883547132872179500538677962865533522184313800029086407886083506919095120007962636933822066201788732865654196635277087736, e, n)
print("encrypt => \n",encrypt)

decrypt = mod_exp(18411442606915243218713454991322354743412930759687885355252648572402707493014013315110487988485533826459755699253067950732944374592313902679102281078519887578894150015862076477930716103147852804970150856266364945842319635388057040063441886189178592842136883895867965679553033125281895293199287694151649189281,
d, n)
print("decrypt => \n",decrypt)